// Keywords: continuous space, continuous spatial landscape, spatial map, reprising boundaries, QTL, quantitative trait loci, spatial competition, spatial mate choice

initialize() {
	defineConstant("sigma_C", 0.1);
	defineConstant("sigma_K", 0.5);
	defineConstant("sigma_M", 0.1);
	defineConstant("N", 500);
	
	defineConstant("subpopCount",2); // -P
	
	initializeSLiMOptions(dimensionality="xyz");
	initializeMutationRate(1e-6);
	initializeMutationType("m1", 0.5, "f", 0.0);        // neutral
	initializeMutationType("m2", 0.5, "n", 0.0, 1.0);   // QTL
	m2.convertToSubstitution = F;
	
	initializeGenomicElementType("g1", c(m1, m2), c(1, 0.1));
	initializeGenomicElement(g1, 0, 1e5 - 1);
	initializeRecombinationRate(1e-8);
	
	initializeInteractionType(1, "xyz", reciprocal=T, maxDistance=sigma_C * 3);     // competition
	i1.setInteractionFunction("n", 1.0, sigma_C);
	initializeInteractionType(2, "xyz", reciprocal=T, maxDistance=sigma_M * 3);     // mate choice
	i2.setInteractionFunction("n", 1.0, sigma_M);
}
1 late() {
	defineConstant("mapValues", runif(25, 0, 1));
	for (i in 1:subpopCount) {
		sim.addSubpop(i, N);
		sim.subpopulations[i-1].setSpatialBounds(c(0.0, 0.0, 0.0, 1.0, 1.0, 1.0));
		
		
		
		sim.subpopulations[i-1].defineSpatialMap("map1", "xy", c(5, 5), mapValues, interpolate=T,valueRange=c(0.0, 1.0), colors=c("red", "yellow"));
		
		for (ind in sim.subpopulations[i-1].individuals) {
			ind.setSpatialPosition(p1.pointUniform());
		}
		p1.individuals.z = 0.0;
	
	}
}
modifyChild() {
	// set offspring position based on parental position
	do
		pos = c(parent1.spatialPosition[0:1] + rnorm(2, 0, 0.005), 0.0);
	while (!p1.pointInBounds(pos));
	child.setSpatialPosition(pos);
	
	return T;
}
1: late() {
	// construct phenotypes from the additive effects of QTLs
	inds = sim.subpopulations.individuals;
	phenotype = inds.sumOfMutationsOfType(m2);
	inds.z = phenotype;
	
	// color individuals according to phenotype
	inds.color = p1.spatialMapColor("map1", phenotype);
	
	// evaluate interactions
	i1.evaluate();
	i2.evaluate();
}
fitness(m2) {      // make QTLs intrinsically neutral
	return 1.0;
}
fitness(NULL) {    // reward proximity to the optimum
	location = individual.spatialPosition[0:1];
	optimum = subpop.spatialMapValue("map1", location);
	return 1.0 + dnorm(optimum - individual.z, mean=0.0, sd=sigma_K);
}
fitness(NULL) {    // phenotypic competition
	totalStrength = sum(i1.strength(individual));
	return 1.0 - totalStrength / p1.individualCount;
}
mateChoice() {
	// spatial mate choice
	return i2.strength(individual);
}

2 early() {
	// split the populations
	for (i in 1:subpopCount) {
		//print(i);
		low = (i-1)/subpopCount;
		high = i/subpopCount;
		//print(low);
		//print(high);
		//print("x");
		for (ind in sim.subpopulations[i-1].individuals) {
			locationx = ind.spatialPosition[0];
			locationy = ind.spatialPosition[1];
			//print(location);
			
			// this is not working 
			
			if (locationx <= low | locationx > high) {
				ind.fitnessScaling=0;
				cat("yay");
			}
			else {
				cat("boo");
				ind.fitnessScaling=1;
			}
		
		}
	}
}

10000 late() {
	sim.simulationFinished();
}
